"use client"
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.tsx
var src_exports = {};
__export(src_exports, {
  Badge: () => Badge2
});
module.exports = __toCommonJS(src_exports);
var import_react = __toESM(require("react"));
var import_system = require("@welcome-ui/system");

// src/styles.ts
var import_styled_components = __toESM(require("@xstyled/styled-components"));
var Badge = import_styled_components.default.div(
  ({ disabled, length, size, variant }) => import_styled_components.css`
    ${(0, import_styled_components.th)("badges.default")};
    ${(0, import_styled_components.th)(`badges.variants.${variant}`)};
    ${(0, import_styled_components.th)(`badges.sizes.${size}`)};
    display: inline-flex;
    align-items: center;
    justify-content: center;
    ${import_styled_components.system};

    ${disabled && import_styled_components.css`
      ${(0, import_styled_components.th)(`badges.disabled.${variant}`)};
    `}

    ${length === 1 && import_styled_components.css`
      width: ${(0, import_styled_components.th)(`badges.sizes.${size}.height`)};
    `}
  `
);

// src/index.tsx
var Badge2 = (0, import_system.forwardRef)(
  ({
    children,
    dataTestId,
    disabled,
    size = "md",
    variant = "default",
    withNumberAbbreviation,
    ...rest
  }, ref) => {
    let text;
    const isNumber = Number.isInteger(children);
    const textLength = children.toString().length;
    if (isNumber) {
      if (withNumberAbbreviation && children > 99) {
        text = "99+";
      } else {
        text = children;
      }
    } else {
      text = children;
    }
    return /* @__PURE__ */ import_react.default.createElement(
      Badge,
      {
        "data-testid": dataTestId,
        disabled,
        length: textLength,
        ref,
        size,
        variant,
        ...rest
      },
      text
    );
  }
);
Badge2.displayName = "Badge";
