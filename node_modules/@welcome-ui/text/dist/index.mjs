"use client"

// src/index.tsx
import React from "react";
import { forwardRef } from "@welcome-ui/system";

// src/styles.ts
import styled, { css, system, th } from "@xstyled/styled-components";
var MOBILE_VARIANTS = {
  h0: "h1",
  h1: "h2",
  h2: "h3",
  h3: "h4",
  h4: "h5",
  h5: "h6",
  h6: "h6"
};
var getBlockHeight = (lines) => css`
  /* stylelint-disable-next-line value-no-vendor-prefix */
  display: -webkit-box;
  /* stylelint-disable-next-line property-no-vendor-prefix */
  -webkit-box-orient: vertical;
  /* stylelint-disable-next-line property-no-vendor-prefix */
  -webkit-line-clamp: ${lines || "none"};
  line-height: normal;
  overflow: hidden;
  word-break: ${lines === 1 ? "break-all" : null};
`;
var Text = styled.p(({ lines, theme, variant, withDash }) => {
  const mobileVariant = MOBILE_VARIANTS[variant];
  const isHeading = variant?.startsWith("h");
  const shouldFixHeadingsLineHeight = lines && lines !== Infinity && variant.startsWith("h") && theme.fonts.headings.includes("welcome-font");
  return css`
    ${th(`texts.${mobileVariant || variant}`)};

    /* Start fallback for non-webkit */
    display: block;
    ${lines && lines !== Infinity && getBlockHeight(lines)};
    /* End fallback for non-webkit */

    ${withDash && isHeading && css`
      display: flex;

      &:before {
        content: '';
        width: 16;
        height: 4;
        display: flex;
        align-self: center;
        flex-shrink: 0;
        background-color: primary-40;
        margin-right: md;
      }
    `}

    @media (min-width: lg) {
      ${th(`texts.${variant}`)};
      ${system};
    }

    ${shouldFixHeadingsLineHeight && css`
      & {
        line-height: 1.4;
      }
    `}

    ${system};
  `;
});

// src/index.tsx
var TAG_NAMES = {
  h0: "h1",
  h1: "h1",
  h2: "h2",
  h3: "h3",
  h4: "h4",
  h5: "h5",
  h6: "h6",
  lg: "p",
  md: "p",
  sm: "p",
  xs: "p",
  "subtitle-md": "span",
  "subtitle-sm": "span"
};
var Text2 = forwardRef(
  ({ as, children, dataTestId, lines, variant = "md", withDash, ...rest }, ref) => {
    const tagName = as || TAG_NAMES[variant];
    const className = rest.className || "";
    return /* @__PURE__ */ React.createElement(
      Text,
      {
        as: tagName,
        "data-testid": dataTestId,
        lines,
        ref,
        variant,
        withDash,
        ...rest,
        className: `${className} wui-text`
      },
      children
    );
  }
);
Text2.displayName = "Text";
export {
  Text2 as Text
};
