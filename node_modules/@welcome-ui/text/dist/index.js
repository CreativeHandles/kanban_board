"use client"
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.tsx
var src_exports = {};
__export(src_exports, {
  Text: () => Text2
});
module.exports = __toCommonJS(src_exports);
var import_react = __toESM(require("react"));
var import_system = require("@welcome-ui/system");

// src/styles.ts
var import_styled_components = __toESM(require("@xstyled/styled-components"));
var MOBILE_VARIANTS = {
  h0: "h1",
  h1: "h2",
  h2: "h3",
  h3: "h4",
  h4: "h5",
  h5: "h6",
  h6: "h6"
};
var getBlockHeight = (lines) => import_styled_components.css`
  /* stylelint-disable-next-line value-no-vendor-prefix */
  display: -webkit-box;
  /* stylelint-disable-next-line property-no-vendor-prefix */
  -webkit-box-orient: vertical;
  /* stylelint-disable-next-line property-no-vendor-prefix */
  -webkit-line-clamp: ${lines || "none"};
  line-height: normal;
  overflow: hidden;
  word-break: ${lines === 1 ? "break-all" : null};
`;
var Text = import_styled_components.default.p(({ lines, theme, variant, withDash }) => {
  const mobileVariant = MOBILE_VARIANTS[variant];
  const isHeading = variant?.startsWith("h");
  const shouldFixHeadingsLineHeight = lines && lines !== Infinity && variant.startsWith("h") && theme.fonts.headings.includes("welcome-font");
  return import_styled_components.css`
    ${(0, import_styled_components.th)(`texts.${mobileVariant || variant}`)};

    /* Start fallback for non-webkit */
    display: block;
    ${lines && lines !== Infinity && getBlockHeight(lines)};
    /* End fallback for non-webkit */

    ${withDash && isHeading && import_styled_components.css`
      display: flex;

      &:before {
        content: '';
        width: 16;
        height: 4;
        display: flex;
        align-self: center;
        flex-shrink: 0;
        background-color: primary-40;
        margin-right: md;
      }
    `}

    @media (min-width: lg) {
      ${(0, import_styled_components.th)(`texts.${variant}`)};
      ${import_styled_components.system};
    }

    ${shouldFixHeadingsLineHeight && import_styled_components.css`
      & {
        line-height: 1.4;
      }
    `}

    ${import_styled_components.system};
  `;
});

// src/index.tsx
var TAG_NAMES = {
  h0: "h1",
  h1: "h1",
  h2: "h2",
  h3: "h3",
  h4: "h4",
  h5: "h5",
  h6: "h6",
  lg: "p",
  md: "p",
  sm: "p",
  xs: "p",
  "subtitle-md": "span",
  "subtitle-sm": "span"
};
var Text2 = (0, import_system.forwardRef)(
  ({ as, children, dataTestId, lines, variant = "md", withDash, ...rest }, ref) => {
    const tagName = as || TAG_NAMES[variant];
    const className = rest.className || "";
    return /* @__PURE__ */ import_react.default.createElement(
      Text,
      {
        as: tagName,
        "data-testid": dataTestId,
        lines,
        ref,
        variant,
        withDash,
        ...rest,
        className: `${className} wui-text`
      },
      children
    );
  }
);
Text2.displayName = "Text";
