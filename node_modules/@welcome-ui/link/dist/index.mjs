"use client"

// src/index.tsx
import React from "react";
import { forwardRef } from "@welcome-ui/system";
import { ExternalLinkIcon } from "@welcome-ui/icons";

// src/styles.ts
import styled, { css, system, th, typography } from "@xstyled/styled-components";
import { UniversalLink } from "@welcome-ui/universal-link";
import { shouldForwardProp } from "@welcome-ui/system";
var Link = styled(UniversalLink).withConfig({ shouldForwardProp })(
  ({ isExternal, variant = "primary" }) => css`
    display: inline-flex;
    flex-direction: row;
    align-items: center;
    opacity: 1;
    line-height: 1.5;
    text-decoration: none;
    cursor: pointer;

    > .wui-text {
      margin-right: -2px;
      margin-left: -2px;
      padding-left: 2px;
      padding-right: 2px;
      ${th("underline.default")};
      ${th("links.default")};
      ${th(`links.${variant}.default`)};
      ${isExternal && th("links.withExternalLink")};
      ${typography};
    }

    &:hover,
    &:focus {
      > .wui-text {
        ${th("underline.hover")};
        ${th(`links.${variant}.hover`)};
        outline: none !important;
      }
    }

    &[disabled] {
      > .wui-text {
        ${th("links.disabled")};
      }
      pointer-events: none;
    }

    ${system};

    & > *:not(:only-child):not(:last-child) {
      margin-right: xs;
    }
  `
);

// src/utils.ts
var shouldWrapElementWithText = (value) => {
  return (
    // <span />
    value?.type === "span" || // <Box as="span" />
    value?.props?.as === "span" || // <FormattedMessage />
    value?.props?.tagName === "span" || value?.props?.["data-wui-link"] === true
  );
};
var shouldWrapWithText = (value) => {
  return typeof value === "object" ? shouldWrapElementWithText(value) : typeof value === "string";
};

// src/index.tsx
var WrapWithText = ({ children, isExternal }) => /* @__PURE__ */ React.createElement("span", { className: "wui-text" }, children, isExternal && /* @__PURE__ */ React.createElement(ExternalLinkIcon, { mb: "-2px", ml: "sm", size: "sm" }));
var Link2 = forwardRef((props, ref) => {
  const { children, dataTestId, disabled, isExternal, variant = "primary", ...rest } = props;
  const content = shouldWrapWithText(children) ? /* @__PURE__ */ React.createElement(WrapWithText, { isExternal }, children) : React.Children.map(children, (child) => {
    if (shouldWrapWithText(child)) {
      return /* @__PURE__ */ React.createElement(WrapWithText, { isExternal }, child);
    }
    return child;
  });
  return /* @__PURE__ */ React.createElement(
    Link,
    {
      "data-testid": dataTestId,
      disabled,
      isExternal,
      ref,
      variant,
      ...rest
    },
    content
  );
});
Link2.displayName = "Link";
export {
  Link2 as Link
};
