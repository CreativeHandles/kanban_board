"use client"
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.tsx
var src_exports = {};
__export(src_exports, {
  Link: () => Link2
});
module.exports = __toCommonJS(src_exports);
var import_react = __toESM(require("react"));
var import_system2 = require("@welcome-ui/system");
var import_icons = require("@welcome-ui/icons");

// src/styles.ts
var import_styled_components = __toESM(require("@xstyled/styled-components"));
var import_universal_link = require("@welcome-ui/universal-link");
var import_system = require("@welcome-ui/system");
var Link = (0, import_styled_components.default)(import_universal_link.UniversalLink).withConfig({ shouldForwardProp: import_system.shouldForwardProp })(
  ({ isExternal, variant = "primary" }) => import_styled_components.css`
    display: inline-flex;
    flex-direction: row;
    align-items: center;
    opacity: 1;
    line-height: 1.5;
    text-decoration: none;
    cursor: pointer;

    > .wui-text {
      margin-right: -2px;
      margin-left: -2px;
      padding-left: 2px;
      padding-right: 2px;
      ${(0, import_styled_components.th)("underline.default")};
      ${(0, import_styled_components.th)("links.default")};
      ${(0, import_styled_components.th)(`links.${variant}.default`)};
      ${isExternal && (0, import_styled_components.th)("links.withExternalLink")};
      ${import_styled_components.typography};
    }

    &:hover,
    &:focus {
      > .wui-text {
        ${(0, import_styled_components.th)("underline.hover")};
        ${(0, import_styled_components.th)(`links.${variant}.hover`)};
        outline: none !important;
      }
    }

    &[disabled] {
      > .wui-text {
        ${(0, import_styled_components.th)("links.disabled")};
      }
      pointer-events: none;
    }

    ${import_styled_components.system};

    & > *:not(:only-child):not(:last-child) {
      margin-right: xs;
    }
  `
);

// src/utils.ts
var shouldWrapElementWithText = (value) => {
  return (
    // <span />
    value?.type === "span" || // <Box as="span" />
    value?.props?.as === "span" || // <FormattedMessage />
    value?.props?.tagName === "span" || value?.props?.["data-wui-link"] === true
  );
};
var shouldWrapWithText = (value) => {
  return typeof value === "object" ? shouldWrapElementWithText(value) : typeof value === "string";
};

// src/index.tsx
var WrapWithText = ({ children, isExternal }) => /* @__PURE__ */ import_react.default.createElement("span", { className: "wui-text" }, children, isExternal && /* @__PURE__ */ import_react.default.createElement(import_icons.ExternalLinkIcon, { mb: "-2px", ml: "sm", size: "sm" }));
var Link2 = (0, import_system2.forwardRef)((props, ref) => {
  const { children, dataTestId, disabled, isExternal, variant = "primary", ...rest } = props;
  const content = shouldWrapWithText(children) ? /* @__PURE__ */ import_react.default.createElement(WrapWithText, { isExternal }, children) : import_react.default.Children.map(children, (child) => {
    if (shouldWrapWithText(child)) {
      return /* @__PURE__ */ import_react.default.createElement(WrapWithText, { isExternal }, child);
    }
    return child;
  });
  return /* @__PURE__ */ import_react.default.createElement(
    Link,
    {
      "data-testid": dataTestId,
      disabled,
      isExternal,
      ref,
      variant,
      ...rest
    },
    content
  );
});
Link2.displayName = "Link";
