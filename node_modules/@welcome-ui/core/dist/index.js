"use client"
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  GlobalStyle: () => GlobalStyle,
  WuiProvider: () => WuiProvider,
  colorsDark: () => colorsDark,
  createTheme: () => createTheme,
  darkTheme: () => darkTheme
});
module.exports = __toCommonJS(src_exports);

// src/theme/core.ts
var import_mergeDeepRight = __toESM(require("ramda/src/mergeDeepRight"));
var import_styled_components2 = require("@xstyled/styled-components");

// src/theme/colors.ts
var palette = {
  "beige-10": "#FBF9F7",
  "beige-20": "#F6F3EF",
  "beige-30": "#EAE4DE",
  "beige-40": "#D2CBC3",
  "beige-50": "#A7A096",
  "beige-60": "#605B55",
  "beige-70": "#4D4944",
  "beige-80": "#33302D",
  "beige-90": "#1E1C1A",
  "blue-10": "#E0F5FF",
  "blue-20": "#BBEAFF",
  "blue-30": "#9BDEF7",
  "blue-40": "#55C3E9",
  // brand
  "blue-50": "#27A5D0",
  "blue-60": "#057AA3",
  "blue-70": "#025A79",
  "blue-80": "#013C50",
  "blue-90": "#00202B",
  "green-10": "#EAFFD4",
  "green-20": "#D6F6B4",
  "green-30": "#BADE94",
  // brand
  "green-40": "#9FC873",
  "green-50": "#83AD57",
  "green-60": "#5A8034",
  "green-70": "#40611F",
  "green-80": "#2A4210",
  "green-90": "#142603",
  "neutral-10": "#FFFFFF",
  "neutral-20": "#F3F3F3",
  "neutral-30": "#DEDEDE",
  "neutral-40": "#BDBDBD",
  "neutral-50": "#989898",
  "neutral-60": "#585858",
  "neutral-70": "#444444",
  "neutral-80": "#212121",
  "neutral-90": "#000000",
  "orange-10": "#FFEBCE",
  "orange-20": "#FFD495",
  "orange-30": "#FFBB59",
  "orange-40": "#FF9F14",
  "orange-50": "#DB860A",
  "orange-60": "#A6670A",
  "orange-70": "#824F06",
  "orange-80": "#573607",
  "orange-90": "#382303",
  "pink-10": "#FFEAF5",
  "pink-20": "#FFD5EB",
  "pink-30": "#FEB7DC",
  "pink-40": "#F696C8",
  // brand
  "pink-50": "#E468A8",
  "pink-60": "#C24887",
  "pink-70": "#972962",
  "pink-80": "#6D1142",
  "pink-90": "#3C0725",
  "red-10": "#FBDEDC",
  "red-20": "#FCC7C3",
  "red-30": "#FDB3AE",
  "red-40": "#FF9490",
  "red-50": "#FF6165",
  "red-60": "#E1003A",
  "red-70": "#A80029",
  "red-80": "#75001A",
  "red-90": "#450101",
  "red-orange-10": "#FFDED0",
  "red-orange-20": "#FFC9B2",
  "red-orange-30": "#FFB595",
  "red-orange-40": "#FF9868",
  // brand
  "red-orange-50": "#E67B49",
  "red-orange-60": "#C45927",
  "red-orange-70": "#9F4217",
  "red-orange-80": "#6D2605",
  "red-orange-90": "#451701",
  "teal-10": "#D5FFFA",
  "teal-20": "#AAF4EB",
  "teal-30": "#6DE1D2",
  "teal-40": "#00C7AE",
  // brand
  "teal-50": "#01AA95",
  "teal-60": "#008070",
  "teal-70": "#00544A",
  "teal-80": "#003D35",
  "teal-90": "#00211D",
  "violet-10": "#F2F2FF",
  "violet-20": "#E0E0FF",
  "violet-30": "#C9C9FF",
  "violet-40": "#ACACFF",
  // brand
  "violet-50": "#9080F0",
  "violet-60": "#7958D6",
  "violet-70": "#593CAC",
  "violet-80": "#422A86",
  "violet-90": "#1F0E51",
  "yellow-10": "#FFF8D9",
  "yellow-20": "#FFF1B2",
  "yellow-30": "#FFE166",
  "yellow-40": "#FFCD00",
  "yellow-50": "#E5B800",
  "yellow-60": "#B69200",
  "yellow-70": "#846A01",
  "yellow-80": "#604D00",
  "yellow-90": "#423500"
};
var getColors = (systemColors) => ({
  ...systemColors,
  "primary-10": systemColors["yellow-10"],
  "primary-20": systemColors["yellow-20"],
  "primary-30": systemColors["yellow-30"],
  "primary-40": systemColors["yellow-40"],
  "primary-50": systemColors["yellow-50"],
  "primary-60": systemColors["yellow-60"],
  "primary-70": systemColors["yellow-70"],
  "primary-80": systemColors["yellow-80"],
  "primary-90": systemColors["yellow-90"],
  "secondary-blue": systemColors["blue-40"],
  "secondary-green": systemColors["green-30"],
  "secondary-orange": systemColors["red-orange-40"],
  "secondary-pink": systemColors["pink-40"],
  "secondary-teal": systemColors["teal-40"],
  "secondary-violet": systemColors["violet-40"],
  overlay: "rgba(0, 0, 0, 0.55)"
});
var colors = getColors(palette);

// src/theme/fonts.ts
var fontFaces = (theme) => ({
  "welcome-font": [
    {
      url: `${theme.fontsUrl}/welcome-font-regular`,
      weight: "400"
    },
    {
      url: `${theme.fontsUrl}/welcome-font-medium`,
      weight: "500"
    },
    {
      url: `${theme.fontsUrl}/welcome-font-bold`,
      weight: "600"
    },
    {
      url: `${theme.fontsUrl}/welcome-font-regular-italic`,
      style: "italic",
      weight: "400"
    },
    {
      url: `${theme.fontsUrl}/welcome-font-medium-italic`,
      style: "italic",
      weight: "500"
    },
    {
      url: `${theme.fontsUrl}/welcome-font-bold-italic`,
      style: "italic",
      weight: "600"
    }
  ],
  "welcome-icon-font": [
    {
      url: `${theme.fontsUrl}/icon-font/86a20c5c3091bc8c215437747a3bfd2a2bfe8c94/welcome-icon-font`,
      display: "block"
    }
  ],
  "work-sans": [
    {
      url: `${theme.fontsUrl}/work-sans-variable`,
      isVariable: true,
      stretch: "75% 125%",
      weight: "100 1000"
    }
  ]
});

// src/theme/typography.ts
var getFontSizes = (unit, theme) => {
  const { toEm, toRem } = theme;
  const convert = unit === "em" ? toEm : toRem;
  return {
    h0: convert(65),
    h1: convert(45),
    h2: convert(36),
    h3: convert(26),
    h4: convert(20),
    h5: convert(16),
    h6: convert(14),
    lg: convert(18),
    md: convert(16),
    sm: convert(14),
    "subtitle-md": convert(13),
    "subtitle-sm": convert(11),
    xs: convert(12)
  };
};
var getLineHeights = ({
  defaultLineHeight,
  toRem
}) => {
  return {
    html: defaultLineHeight,
    h0: toRem(72),
    h1: toRem(48),
    h2: toRem(40),
    h3: toRem(32),
    h4: toRem(24),
    h5: toRem(18),
    h6: toRem(16),
    lg: toRem(24),
    md: toRem(18),
    sm: toRem(18),
    xs: toRem(14),
    "subtitle-md": defaultLineHeight,
    "subtitle-sm": defaultLineHeight
  };
};
var fontWeights = {
  regular: 400,
  medium: 500,
  bold: 600
};
var getLetterSpacings = ({
  defaultLetterSpacing,
  toRem
}) => {
  return {
    html: defaultLetterSpacing,
    h0: toRem(-1.7),
    h1: toRem(-1.2),
    h2: toRem(-1),
    h3: toRem(-0.9),
    h4: toRem(-0.6),
    h5: toRem(-0.5),
    h6: toRem(-0.5),
    lg: defaultLetterSpacing,
    md: defaultLetterSpacing,
    sm: defaultLetterSpacing,
    xs: toRem(-0.2),
    "subtitle-md": toRem(-0.2),
    "subtitle-sm": toRem(-0.2)
  };
};
var getTextsFontWeights = (theme) => {
  const { fontWeights: fontWeights2 } = theme;
  return {
    h0: fontWeights2.bold,
    h1: fontWeights2.bold,
    h2: fontWeights2.bold,
    h3: fontWeights2.bold,
    h4: fontWeights2.bold,
    h5: fontWeights2.bold,
    h6: fontWeights2.bold,
    lg: fontWeights2.regular,
    md: fontWeights2.regular,
    sm: fontWeights2.regular,
    "subtitle-md": fontWeights2.bold,
    "subtitle-sm": fontWeights2.medium,
    xs: fontWeights2.regular
  };
};
var getTextsFontFamily = (theme) => {
  const { fonts: fonts2 } = theme;
  return {
    h0: fonts2.headings,
    h1: fonts2.headings,
    h2: fonts2.headings,
    h3: fonts2.headings,
    h4: fonts2.headings,
    h5: fonts2.headings,
    h6: fonts2.headings,
    "subtitle-md": fonts2.headings,
    "subtitle-sm": fonts2.headings
  };
};
var getTextsTextTransform = () => {
  return {
    "subtitle-md": "uppercase",
    "subtitle-sm": "uppercase"
  };
};
var getTextFontColors = (theme) => {
  const { colors: colors2 } = theme;
  return {
    h0: colors2["neutral-90"],
    h1: colors2["neutral-90"],
    h2: colors2["neutral-90"],
    h3: colors2["neutral-90"],
    h4: colors2["neutral-90"],
    h5: colors2["neutral-90"],
    h6: colors2["neutral-90"]
  };
};
var getTexts = (theme) => {
  const {
    fontSizes,
    letterSpacings,
    lineHeights,
    textsFontColors,
    textsFontFamily,
    textsFontWeights,
    textsTextTransform
  } = theme;
  return Object.keys(fontSizes).reduce((acc, key) => {
    return {
      ...acc,
      [key]: {
        color: textsFontColors[key],
        fontFamily: textsFontFamily[key] || void 0,
        fontWeight: textsFontWeights[key],
        fontSize: fontSizes[key],
        lineHeight: lineHeights[key] || lineHeights.lg,
        letterSpacing: letterSpacings[key] || void 0,
        textTransform: textsTextTransform[key] || void 0
      }
    };
  }, {});
};
var getFonts = (defaultFontFamily, headingFontFamily, iconFontFamily) => {
  return {
    texts: [defaultFontFamily, "sans-serif"].join(", "),
    headings: [headingFontFamily, "sans-serif"].join(", "),
    icons: iconFontFamily
  };
};

// src/theme/transitions.ts
var timingFunction = {
  primary: "ease",
  secondary: "linear",
  tertiary: "cubic-bezier(0.41, 0.094, 0.54, 0.07)"
};
var transitions = {
  slow: `500ms ${timingFunction.tertiary}`,
  medium: `300ms ${timingFunction.primary}`,
  fast: `100ms ${timingFunction.secondary}`
};

// src/theme/underline.ts
var import_styled_components = require("styled-components");
var getUnderline = ({ colors: colors2 }) => {
  return {
    default: import_styled_components.css`
      background-image: linear-gradient(
        0deg,
        ${colors2["primary-40"]},
        ${colors2["primary-40"]} 100%
      );
      background-repeat: no-repeat;
      background-size: 100% 50%;
      background-position-y: calc(200% - 2px);
      transition:
        background-position-y 250ms,
        background-size 250ms,
        color 250ms;
    `,
    hover: import_styled_components.css`
      opacity: 1;
      background-position-y: 100%;
      background-size: 100% 100%;
    `
  };
};

// src/theme/defaultFields.ts
var getDefaultFields = (theme) => {
  const { borderWidths: borderWidths2, colors: colors2, focus, fontSizes, fontWeights: fontWeights2, radii, space, toRem } = theme;
  return {
    default: {
      color: colors2["neutral-90"],
      fontSize: fontSizes.sm,
      /* Can't use 16 because that's a valid line-height value (16em) */
      lineHeight: "1rem",
      fontWeight: fontWeights2.regular,
      backgroundColor: colors2["neutral-10"],
      borderColor: colors2["neutral-30"],
      borderWidth: borderWidths2.sm,
      borderStyle: "solid",
      outline: "none",
      borderRadius: radii.md
    },
    hover: {
      default: {
        borderColor: colors2["neutral-40"]
      },
      transparency: {
        borderColor: colors2["neutral-20"]
      }
    },
    variants: {
      danger: {
        borderColor: colors2["red-70"]
      },
      success: {
        borderColor: colors2["green-60"]
      },
      warning: {
        borderColor: colors2["orange-60"]
      }
    },
    focused: {
      default: {
        ...focus(colors2["primary-20"]),
        borderColor: colors2["primary-40"]
      },
      danger: { ...focus(colors2["red-30"]) },
      warning: { ...focus(colors2["orange-20"]) },
      success: { ...focus(colors2["green-30"]) }
    },
    sizes: {
      xs: {
        height: toRem(24),
        paddingTop: space.xs,
        paddingRight: space.sm,
        paddingBottom: space.xs,
        paddingLeft: space.sm
      },
      sm: {
        height: toRem(32),
        paddingTop: space.sm,
        paddingRight: space.md,
        paddingBottom: space.sm,
        paddingLeft: space.md
      },
      md: {
        height: toRem(40),
        paddingTop: space.md,
        paddingRight: space.md,
        paddingBottom: space.md,
        paddingLeft: space.md
      },
      lg: {
        height: toRem(48),
        paddingTop: space.lg,
        paddingRight: space.md,
        paddingBottom: space.lg,
        paddingLeft: space.md
      }
    },
    iconPlacement: {
      xs: {
        left: toRem(8),
        right: toRem(8)
      },
      sm: {
        left: toRem(12),
        right: toRem(12)
      },
      md: {
        left: toRem(12),
        right: toRem(12)
      },
      lg: {
        left: toRem(12),
        right: toRem(12)
      }
    },
    checkableField: {
      checked: {
        color: "neutral-90"
        // not hex color, only color from browser because is on a content svg
      },
      disabled: {
        opacity: 0.4
      }
    },
    disabled: {
      backgroundColor: colors2["beige-40"],
      color: colors2["beige-70"],
      cursor: "not-allowed"
    },
    placeholder: {
      color: colors2["neutral-50"]
    },
    checkablelabel: {
      default: {},
      checked: {
        color: colors2["neutral-90"],
        "-webkit-text-stroke": "0.04em"
      }
    },
    select: {
      default: {
        maxHeight: toRem(155),
        borderRadius: radii.md
      },
      existing: {
        color: colors2["beige-40"],
        cursor: "not-allowed"
      },
      highlighted: {
        backgroundColor: colors2["beige-20"],
        cursor: "default"
      },
      selectedAndHighlighted: {
        backgroundImage: "linear-gradient(0deg, rgba(0, 0, 0, 0.08), rgba(0, 0, 0, 0.08) 100%)"
      },
      selected: {
        color: colors2["neutral-90"],
        fontWeight: fontWeights2.bold
      },
      disabled: {
        color: colors2["beige-60"],
        cursor: "not-allowed"
      }
    },
    fieldset: {
      "border-width": "0"
    }
  };
};

// src/theme/defaultCards.ts
var getDefaultCards = ({
  borderWidths: borderWidths2,
  colors: colors2
}) => ({
  backgroundColor: colors2["neutral-10"],
  borderStyle: "solid",
  borderWidth: borderWidths2.sm,
  borderColor: colors2["neutral-30"]
});

// src/theme/radii.ts
var getRadii = (theme) => {
  return {
    none: "0",
    sm: theme.toRem(2),
    md: theme.toRem(4),
    lg: theme.toRem(8),
    xl: theme.toRem(16),
    xxl: theme.toRem(24),
    full: "100%"
  };
};

// src/theme/borders.ts
var borderWidths = {
  sm: "1px",
  md: "2px",
  lg: "3px"
};

// src/theme/screens.ts
var screens = {
  xs: 0,
  sm: 480,
  md: 736,
  lg: 980,
  xl: 1280,
  xxl: 1440,
  "3xl": 1620,
  "4xl": 1920
};

// src/theme/shadows.ts
var shadows = {
  sm: "1px 2px 4px 0 rgba(0,0,0,0.05)",
  md: "3px 4px 10px 0 rgba(0,0,0,0.07)"
};

// src/theme/space.ts
var getSpace = (theme) => {
  return {
    xxs: theme.toRem(2),
    xs: theme.toRem(4),
    sm: theme.toRem(8),
    md: theme.toRem(12),
    lg: theme.toRem(16),
    xl: theme.toRem(24),
    xxl: theme.toRem(32),
    "3xl": theme.toRem(48),
    "4xl": theme.toRem(64),
    "5xl": theme.toRem(96),
    "6xl": theme.toRem(128),
    "7xl": theme.toRem(192)
  };
};

// src/theme/selection.ts
var getSelection = (theme) => {
  return {
    backgroundColor: theme.colors["primary-40"],
    color: theme.colors["neutral-90"]
  };
};

// src/theme/focus.ts
var getFocus = ({ colors: colors2 }) => {
  function focus(color = colors2["primary-40"]) {
    return {
      boxShadow: `0 0 0 2px ${color}`
    };
  }
  return focus;
};

// src/theme/buttons.ts
var import_utils = require("@welcome-ui/utils");
var getButtons = (theme) => {
  const { colors: colors2, focus, fontWeights: fontWeights2, radii, space, texts, toRem } = theme;
  const defaults = {
    ...texts.xs,
    color: colors2["neutral-10"],
    fontWeight: fontWeights2.bold,
    letterSpacing: 0,
    borderRadius: radii.md
  };
  return {
    primary: {
      ...defaults,
      color: theme.colors["neutral-90"],
      backgroundColor: colors2["primary-40"],
      borderColor: colors2["primary-40"]
    },
    secondary: {
      ...defaults,
      backgroundColor: colors2["neutral-90"],
      borderColor: colors2["neutral-90"]
    },
    tertiary: {
      ...defaults,
      color: colors2["neutral-90"],
      backgroundColor: "transparent",
      borderColor: colors2["neutral-90"]
    },
    ghost: {
      ...defaults,
      color: colors2["neutral-90"],
      backgroundColor: "transparent",
      borderColor: "transparent"
    },
    danger: {
      primary: {
        color: colors2["neutral-10"],
        backgroundColor: colors2["red-70"],
        borderColor: colors2["red-70"]
      },
      tertiary: {
        backgroundColor: "transparent",
        color: colors2["red-80"],
        borderColor: colors2["red-80"]
      },
      ghost: {
        color: colors2["red-80"],
        backgroundColor: "transparent",
        borderColor: "transparent"
      }
    },
    hover: {
      primary: {
        backgroundColor: colors2["primary-30"],
        borderColor: colors2["primary-30"]
      },
      secondary: {
        backgroundColor: colors2["neutral-70"],
        borderColor: "transparent"
      },
      tertiary: {
        backgroundColor: (0, import_utils.hexToRGBA)(colors2["neutral-90"], 0.1)
      },
      ghost: {
        backgroundColor: (0, import_utils.hexToRGBA)(colors2["neutral-90"], 0.1)
      },
      danger: {
        primary: {
          backgroundColor: colors2["red-60"],
          borderColor: colors2["red-60"]
        },
        tertiary: {
          backgroundColor: colors2["red-10"]
        },
        ghost: {
          backgroundColor: colors2["red-10"]
        }
      }
    },
    focus: {
      primary: { ...focus(colors2["primary-20"]) },
      secondary: { ...focus(colors2["neutral-40"]) },
      tertiary: { ...focus(colors2["neutral-40"]) },
      ghost: { ...focus(colors2["neutral-40"]) },
      danger: {
        primary: { ...focus(colors2["red-40"]) },
        tertiary: { ...focus(colors2["red-40"]) },
        ghost: { ...focus(colors2["red-40"]) }
      }
    },
    active: {
      primary: {
        backgroundColor: colors2["primary-10"],
        borderColor: colors2["primary-10"]
      },
      secondary: {
        backgroundColor: colors2["neutral-50"],
        borderColor: colors2["neutral-50"]
      },
      tertiary: {
        backgroundColor: (0, import_utils.hexToRGBA)(colors2["neutral-90"], 0.4)
      },
      ghost: {
        backgroundColor: (0, import_utils.hexToRGBA)(colors2["neutral-90"], 0.4)
      },
      danger: {
        primary: {
          backgroundColor: colors2["red-50"],
          borderColor: colors2["red-50"]
        },
        tertiary: {
          backgroundColor: colors2["red-20"]
        },
        ghost: {
          backgroundColor: colors2["red-20"]
        }
      }
    },
    disabled: {
      ...defaults,
      color: colors2["beige-70"],
      backgroundColor: colors2["beige-40"],
      borderColor: colors2["beige-40"],
      "&:focus": { ...focus(colors2["beige-10"]) }
    },
    sizes: {
      xs: {
        height: toRem(24),
        padding: `${space.xs} ${space.sm}`
      },
      sm: {
        height: toRem(32),
        padding: `${space.sm} ${space.md}`
      },
      md: {
        ...texts.sm,
        fontWeight: fontWeights2.bold,
        height: toRem(40),
        padding: `${space.sm} ${space.lg}`
      },
      lg: {
        ...texts.sm,
        fontWeight: fontWeights2.bold,
        height: toRem(48),
        padding: `${space.md} ${space.xl}`
      }
    },
    icon: {
      only: {
        xs: toRem(16),
        sm: toRem(16),
        md: toRem(16),
        lg: toRem(24)
      },
      default: {
        xs: toRem(12),
        sm: toRem(16),
        md: toRem(16),
        lg: toRem(16)
      }
    }
  };
};

// src/theme/tags.ts
var getTags = (theme) => {
  const { colors: colors2, fontSizes, fontWeights: fontWeights2, radii, space, toRem } = theme;
  const sizes = {
    xs: toRem(20),
    sm: toRem(24),
    md: toRem(32)
  };
  const getState = (color) => ({
    backgroundColor: colors2[`${color}-10`],
    color: colors2[`${color}-90`]
  });
  const getStateHover = (color) => ({
    backgroundColor: colors2[`${color}-20`]
  });
  const getSecondary = (color) => {
    const isGreen = color === "green";
    return {
      backgroundColor: colors2[`${color}-${isGreen ? "30" : "40"}`],
      color: colors2["neutral-90"]
    };
  };
  const getSecondaryHover = (color) => {
    const isGreen = color === "green";
    return {
      backgroundColor: colors2[`${color}-${isGreen ? "40" : "50"}`]
    };
  };
  return {
    default: {
      fontWeight: fontWeights2.medium,
      borderRadius: radii.md
    },
    variants: {
      default: {
        backgroundColor: colors2["beige-20"],
        color: colors2["beige-90"]
      },
      primary: {
        color: theme.colors["neutral-90"],
        backgroundColor: colors2["primary-40"]
      },
      success: getState("green"),
      danger: getState("red"),
      warning: getState("orange"),
      info: getState("blue"),
      teal: getSecondary("teal"),
      blue: getSecondary("blue"),
      orange: getSecondary("orange"),
      pink: getSecondary("pink"),
      green: getSecondary("green"),
      violet: getSecondary("violet")
    },
    hover: {
      default: {
        backgroundColor: colors2["beige-30"]
      },
      primary: {
        backgroundColor: colors2["primary-50"]
      },
      success: getStateHover("green"),
      danger: getStateHover("red"),
      warning: getStateHover("orange"),
      info: getStateHover("blue"),
      teal: getSecondaryHover("teal"),
      blue: getSecondaryHover("blue"),
      orange: getSecondaryHover("orange"),
      pink: getSecondaryHover("pink"),
      green: getSecondaryHover("green"),
      violet: getSecondaryHover("violet")
    },
    sizes: {
      xs: {
        padding: `${space.xxs} ${space.xs}`,
        height: sizes.xs,
        fontSize: fontSizes.xs,
        gap: space.xs,
        borderRadius: radii.sm
      },
      sm: {
        padding: `${space.xs} ${space.sm}`,
        height: sizes.sm,
        fontSize: fontSizes.xs,
        gap: space.xs
      },
      md: {
        padding: `${space.xs} ${space.sm}`,
        height: sizes.md,
        fontSize: fontSizes.sm,
        gap: space.sm
      }
    },
    icon: {
      xs: toRem(12),
      sm: toRem(12),
      md: toRem(16)
    },
    shape: {
      xs: {
        width: sizes.xs,
        height: sizes.xs
      },
      sm: {
        width: sizes.sm,
        height: sizes.sm
      },
      md: {
        width: sizes.md,
        height: sizes.md
      }
    }
  };
};

// src/theme/tooltips.ts
var getTooltips = (theme) => {
  const { borderWidths: borderWidths2, colors: colors2, fontSizes, fontWeights: fontWeights2, radii, space, toRem } = theme;
  return {
    maxWidth: toRem(200),
    backgroundColor: colors2["neutral-90"],
    color: colors2["neutral-10"],
    padding: `${space.xs} ${space.sm}`,
    fontSize: fontSizes.sm,
    fontWeight: fontWeights2.medium,
    border: `${borderWidths2.sm} solid ${colors2["neutral-60"]}`,
    borderRadius: radii.md,
    boxSizing: "border-box"
  };
};

// src/theme/checkboxes.ts
var getCheckboxes = (theme) => {
  const { colors: colors2, radii, toRem } = theme;
  return {
    default: {
      width: toRem(16),
      height: toRem(16),
      flexShrink: 0,
      borderRadius: radii.sm
    },
    disabled: {
      borderColor: colors2["beige-60"]
    },
    checked: {
      color: colors2["neutral-90"],
      backgroundColor: colors2["primary-40"],
      borderColor: colors2["primary-40"]
    }
  };
};

// src/theme/modals.ts
var getModals = (theme) => {
  const { colors: colors2, radii, space, toRem } = theme;
  return {
    backdrop: {
      backgroundColor: colors2.overlay,
      zIndex: 999
    },
    default: {
      zIndex: 999,
      borderRadius: radii.md
    },
    header: {
      backgroundColor: colors2["neutral-10"],
      borderTopLeftRadius: radii.md,
      borderTopRightRadius: radii.md,
      paddingTop: space.xxl,
      paddingRight: space["3xl"],
      paddingBottom: space.xxl,
      paddingLeft: space.xxl,
      subtitle: {
        color: colors2["neutral-70"],
        variant: "sm",
        margin: 0
      }
    },
    body: {
      color: colors2["neutral-90"],
      paddingRight: space["3xl"],
      paddingBottom: space.xxl,
      paddingLeft: space.xxl
    },
    footer: {
      backgroundColor: colors2["neutral-10"],
      borderTop: `solid ${colors2["neutral-30"]}`,
      borderBottomLeftRadius: radii.md,
      borderBottomRightRadius: radii.md,
      children: {
        paddingRight: space.xxl,
        paddingLeft: space.xxl,
        paddingTop: space.lg,
        paddingBottom: space.xl
      },
      information: {
        backgroundColor: colors2["beige-20"],
        paddingRight: space.xxl,
        paddingLeft: space.xxl,
        paddingTop: space.xl,
        paddingBottom: space.xxl
      }
    },
    gutter: toRem(32),
    sizes: {
      xs: {
        width: toRem(320)
      },
      sm: {
        width: toRem(450)
      },
      md: {
        width: toRem(600)
      },
      lg: {
        width: toRem(730)
      },
      auto: {}
    },
    cover: {}
  };
};

// src/theme/sliders.ts
var getSliders = (theme) => {
  const { borderWidths: borderWidths2, colors: colors2 } = theme;
  return {
    default: {
      backgroundColor: colors2["beige-40"],
      backgroundImage: `linear-gradient(${colors2["primary-40"]}, ${colors2["primary-40"]})`
    },
    selector: {
      backgroundColor: colors2["neutral-90"],
      borderRadius: "50%",
      border: `${borderWidths2.md} solid`,
      disabled: {
        backgroundColor: colors2["beige-60"]
      }
    },
    output: {
      tooltip: {
        backgroundColor: colors2["neutral-90"],
        border: `${borderWidths2.sm} solid ${colors2["neutral-70"]}}`,
        color: colors2["neutral-10"]
      }
    },
    focused: {
      outline: `${borderWidths2.md} solid ${colors2["primary-40"]}`,
      disabled: {
        outline: "none"
      }
    },
    disabled: {
      backgroundImage: `linear-gradient(${colors2["beige-60"]}, ${colors2["beige-60"]})`
    },
    rangeInput: {
      disabled: {
        backgroundColor: colors2["beige-60"]
      }
    }
  };
};

// src/theme/toggles.ts
var XS_LINE_HEIGHT_ADJUSTMENTS = "0.32rem !important";
var SM_LINE_HEIGHT_ADJUSTMENTS = "0.12rem ! important";
var getToggles = (theme) => {
  const { borderWidths: borderWidths2, colors: colors2, focus, toRem } = theme;
  return {
    item: {
      default: {
        backgroundColor: colors2["neutral-10"],
        borderColor: colors2["neutral-30"],
        borderWidth: borderWidths2.sm,
        borderStyle: "solid",
        borderRadius: toRem(16),
        "&:focus": {
          borderColor: colors2["primary-30"],
          ...focus(colors2["primary-30"])
        }
      },
      sizes: {
        xs: {
          width: toRem(28),
          height: toRem(16),
          marginTop: XS_LINE_HEIGHT_ADJUSTMENTS
        },
        sm: {
          width: toRem(36),
          height: toRem(20),
          marginTop: SM_LINE_HEIGHT_ADJUSTMENTS
        },
        md: {
          width: toRem(44),
          height: toRem(24),
          marginTop: "0 !important"
        }
      },
      checked: {
        backgroundColor: colors2["primary-40"],
        borderColor: colors2["primary-40"]
      },
      disabled: {
        borderColor: colors2["beige-60"],
        backgroundColor: colors2["beige-40"]
      }
    },
    after: {
      default: {
        backgroundColor: colors2["neutral-10"],
        borderColor: colors2["neutral-50"],
        borderWidth: borderWidths2.sm,
        borderStyle: "solid",
        borderRadius: "50%"
      },
      checked: {
        backgroundColor: colors2["neutral-10"],
        borderColor: colors2["neutral-10"]
      },
      disabled: {
        borderColor: "transparent",
        backgroundColor: colors2["beige-60"]
      },
      sizes: {
        xs: {
          width: toRem(12),
          height: toRem(12)
        },
        sm: {
          width: toRem(16),
          height: toRem(16)
        },
        md: {
          width: toRem(20),
          height: toRem(20)
        }
      }
    },
    icon: {
      position: {
        xs: {
          left: "2px",
          right: "2px"
        },
        sm: {
          left: "4px",
          right: "4px"
        },
        md: {
          left: "4px",
          right: "4px"
        }
      },
      sizes: {
        xs: {
          width: toRem(10),
          height: toRem(10),
          fontSize: toRem(10)
        },
        sm: {
          width: toRem(12),
          height: toRem(12),
          fontSize: toRem(12)
        },
        md: {
          width: toRem(16),
          height: toRem(16),
          fontSize: toRem(16)
        }
      }
    }
  };
};

// src/theme/hints.ts
var getHints = (theme) => {
  const { colors: colors2, texts } = theme;
  return {
    default: {
      ...texts.xs,
      color: colors2["neutral-60"]
    },
    danger: {
      color: colors2["red-70"]
    },
    success: {
      color: colors2["green-70"]
    },
    warning: {
      color: colors2["orange-70"]
    }
  };
};

// src/theme/accordions.ts
var getAccordions = (theme) => {
  const { borderWidths: borderWidths2, colors: colors2, fontSizes, radii, space, texts, transitions: transitions2 } = theme;
  return {
    padding: space.lg,
    wrapper: {
      backgroundColor: colors2["neutral-10"],
      transition: transitions2.medium,
      border: `${borderWidths2.sm} solid ${colors2["neutral-30"]}`,
      borderRadius: radii.md
    },
    icon: {
      color: colors2["neutral-90"]
    },
    content: {
      fontSize: fontSizes.sm
    },
    title: texts.h5
  };
};

// src/theme/icons.ts
var getIcons = ({ toRem }) => ({
  xs: toRem(12),
  sm: toRem(16),
  md: toRem(24),
  lg: toRem(32),
  xl: toRem(48),
  xxl: toRem(64)
});

// src/theme/links.ts
var getLinks = (theme) => {
  const { colors: colors2, fontWeights: fontWeights2, icons, space, transitions: transitions2 } = theme;
  return {
    default: {
      color: colors2["neutral-90"],
      fontWeight: fontWeights2.medium,
      transition: transitions2.medium
    },
    withExternalLink: {
      backgroundSize: `calc(100% - ${icons.sm} - ${space.sm}) 50%`
    },
    disabled: {
      color: colors2["neutral-50"],
      backgroundImage: `linear-gradient(0deg, ${colors2["neutral-30"]}, ${colors2["neutral-30"]} 100%)`
    },
    primary: {
      default: {},
      hover: {}
    },
    secondary: {
      default: {
        backgroundImage: `linear-gradient(0deg, ${colors2["neutral-90"]}, ${colors2["neutral-90"]} 100%)`
      },
      hover: {
        color: colors2["neutral-10"]
      }
    }
  };
};

// src/theme/tables.ts
var getTables = (theme) => {
  const { borderWidths: borderWidths2, colors: colors2, fontWeights: fontWeights2, space } = theme;
  return {
    th: {
      color: colors2["neutral-60"],
      fontWeight: fontWeights2.medium,
      textAlign: "left",
      borderBottomColor: colors2["neutral-90"],
      borderBottomWidth: borderWidths2.sm,
      borderBottomStyle: "solid"
    },
    td: {
      textAlign: "left",
      padding: space.xl
    },
    tr: {
      default: {
        borderBottomColor: colors2["neutral-30"],
        borderBottomWidth: borderWidths2.sm,
        borderBottomStyle: "solid"
      },
      danger: {
        backgroundColor: colors2["red-10"],
        color: colors2["red-70"]
      },
      warning: {
        backgroundColor: colors2["orange-10"],
        color: colors2["orange-80"]
      },
      info: {
        backgroundColor: colors2["blue-10"],
        color: colors2["blue-70"]
      },
      success: {
        backgroundColor: colors2["green-10"],
        color: colors2["green-70"]
      },
      clickable: {
        cursor: "pointer"
      }
    }
  };
};

// src/theme/textareas.ts
var getTextareas = (theme) => {
  const { space, toRem } = theme;
  return {
    minHeight: toRem(130),
    padding: space.md
  };
};

// src/theme/filedrops.ts
var getFiledrops = (theme) => {
  const { colors: colors2, toRem } = theme;
  return {
    default: {
      minHeight: toRem(200),
      borderStyle: "dashed"
    },
    dragAccept: {},
    dragReject: {},
    disabled: {
      backgroundColor: colors2["beige-30"]
    }
  };
};

// src/theme/radios.ts
var getRadios = (theme) => {
  const { colors: colors2, toRem } = theme;
  return {
    default: {
      width: toRem(16),
      height: toRem(16)
    },
    checked: {
      color: colors2["neutral-90"],
      borderColor: colors2["primary-40"]
    },
    checkedCenteredColor: {
      default: colors2["primary-40"],
      disabled: colors2["beige-60"]
    }
  };
};

// src/theme/radiosTabs.ts
var getRadioTabs = (theme) => {
  const { colors: colors2 } = theme;
  return {
    default: {
      "&:hover": {
        backgroundColor: colors2["beige-30"]
      }
    },
    checked: {
      backgroundColor: colors2["primary-40"],
      color: theme.colors["neutral-90"],
      borderColor: colors2["primary-40"],
      "&:hover": {
        backgroundColor: colors2["primary-30"]
      }
    }
  };
};

// src/theme/dateTimePickerCommon.ts
var getDateTimePickerCommon = (theme) => {
  const { colors: colors2, fontWeights: fontWeights2 } = theme;
  return {
    item: {
      selected: {
        color: colors2["neutral-90"],
        fontWeight: fontWeights2.bold,
        backgroundColor: colors2["primary-40"],
        outline: "none"
      },
      today: {
        color: colors2["neutral-90"],
        fontWeight: fontWeights2.bold
      }
    }
  };
};

// src/theme/popovers.ts
var getPopovers = (theme) => {
  const { borderWidths: borderWidths2, colors: colors2, space, texts, toRem } = theme;
  return {
    default: {
      ...texts.sm,
      backgroundColor: colors2["neutral-90"],
      color: colors2["neutral-10"],
      maxWidth: toRem(700),
      zIndex: 1
    },
    content: {
      display: "block",
      padding: space.md
    },
    title: {
      ...texts.h6,
      padding: `${space.md} ${space.md} ${space.xs}`,
      color: colors2["neutral-10"],
      borderBottomColor: colors2["neutral-70"],
      borderBottomWidth: borderWidths2.sm,
      borderBottomStyle: "solid"
    }
  };
};

// src/theme/labels.ts
var getLabels = (theme) => {
  const { colors: colors2, fontSizes, fontWeights: fontWeights2 } = theme;
  return {
    color: colors2["neutral-60"],
    fontSize: fontSizes.sm,
    fontWeight: fontWeights2.medium
  };
};

// src/theme/swipers.ts
var getSwipers = (theme) => {
  const { colors: colors2 } = theme;
  return {
    navigation: {
      bullet: {
        active: { backgroundColor: colors2["primary-40"] },
        default: { backgroundColor: colors2["beige-40"] }
      }
    }
  };
};

// src/theme/loaders.ts
var getLoaders = ({ toRem }) => ({
  xs: toRem(8),
  sm: toRem(10),
  md: toRem(15),
  lg: toRem(20)
});

// src/theme/drawers.ts
var getDrawers = (theme) => {
  const { colors: colors2, space, toRem } = theme;
  return {
    backdrop: {
      backgroundColor: colors2.overlay,
      zIndex: 999
    },
    default: {
      zIndex: 999
    },
    closeButton: {},
    title: {
      margin: 0,
      backgroundColor: colors2["neutral-10"],
      padding: `${space["xl"]} ${space["5xl"]} ${space["xl"]} ${space["xl"]}`
    },
    content: {
      padding: `${space["xl"]}`
    },
    footer: {
      backgroundColor: colors2["neutral-10"],
      padding: `${space["xl"]}`
    },
    sizes: {
      horizontal: {
        sm: { width: toRem(400) },
        md: { width: toRem(550) },
        lg: { width: toRem(680) }
      },
      vertical: {
        sm: { height: toRem(400) },
        md: { height: toRem(550) },
        lg: { height: toRem(680) }
      }
    }
  };
};

// src/theme/cards.ts
var getCards = (theme) => {
  const { radii } = theme;
  return {
    default: {
      overflow: "hidden",
      borderRadius: radii.md
    }
  };
};

// src/theme/dropdownMenu.ts
var getDropdownMenu = (theme) => {
  const { colors: colors2, fontSizes, radii, toRem } = theme;
  const borderColor = colors2["beige-30"];
  return {
    inner: {
      fontSize: fontSizes.sm,
      minWidth: toRem(130),
      borderRadius: radii.md
    },
    item: {
      backgroundColor: "transparent",
      color: colors2["beige-70"],
      "&:hover": {
        backgroundColor: colors2["beige-30"],
        color: colors2["neutral-90"]
      },
      "&:focus": {
        backgroundColor: colors2["beige-30"],
        color: colors2["neutral-90"]
      },
      "&[disabled]": {
        backgroundColor: "transparent",
        color: colors2["beige-40"],
        cursor: "not-allowed"
      }
    },
    separator: {
      backgroundColor: borderColor
    }
  };
};

// src/theme/alerts.ts
var getAlerts = (theme) => {
  const { borderWidths: borderWidths2, colors: colors2, fontSizes, fontWeights: fontWeights2, radii, space } = theme;
  const getState = (color) => ({
    backgroundColor: colors2[`${color}-10`],
    borderColor: colors2[`${color}-10`],
    color: colors2[`${color}-90`]
  });
  return {
    default: {
      backgroundColor: colors2["neutral-10"],
      borderColor: colors2["neutral-30"],
      borderRadius: radii.lg,
      borderStyle: "solid",
      borderWidth: borderWidths2.sm,
      color: colors2["neutral-80"],
      fontSize: fontSizes.sm
    },
    title: {
      default: {
        color: colors2["neutral-90"],
        fontWeight: fontWeights2["medium"]
      },
      sizes: {
        sm: {
          marginBottom: space.xs
        },
        md: {
          marginBottom: space.sm
        }
      }
    },
    danger: getState("red"),
    warning: getState("orange"),
    info: getState("blue"),
    success: getState("green"),
    beige: {
      backgroundColor: colors2["beige-20"],
      borderColor: colors2["beige-20"],
      color: colors2["beige-80"]
    },
    sizes: {
      sm: {
        padding: space.lg
      },
      md: {
        padding: space.xl
      }
    }
  };
};

// src/theme/avatars.ts
var getAvatars = (theme) => {
  const { colors: colors2, fontWeights: fontWeights2, toRem } = theme;
  return {
    sizes: {
      sm: toRem(20),
      md: toRem(30),
      lg: toRem(40),
      xl: toRem(50),
      xxl: toRem(60)
    },
    text: {
      color: colors2["neutral-90"],
      fontWeight: fontWeights2.bold
    }
  };
};

// src/theme/breadcrumbs.ts
var getBreadcrumbs = (theme) => {
  const { colors: colors2, space, texts } = theme;
  return {
    list: {
      ...texts["subtitle-sm"],
      padding: `${space.sm} 0`
    },
    item: {
      default: {
        color: colors2["neutral-50"],
        textDecoration: "none"
      },
      hover: {
        color: colors2["neutral-70"]
      },
      active: {
        color: colors2["neutral-70"]
      }
    },
    separator: {
      padding: `0 ${space.xs}`,
      color: colors2["neutral-50"]
    }
  };
};

// src/theme/toasts.ts
var getToasts = (theme) => {
  const { borderWidths: borderWidths2, colors: colors2, fontWeights: fontWeights2, radii, space } = theme;
  return {
    default: {
      paddingLeft: space.sm,
      paddingRight: space.sm
    },
    top: {
      paddingTop: space.lg
    },
    bottom: {
      paddingBottom: space.lg
    },
    growls: {
      default: {
        ...getTexts(theme).sm,
        borderWidth: borderWidths2.sm,
        borderStyle: "solid",
        borderRadius: radii.lg,
        maxWidth: 340
      },
      title: {
        fontWeight: fontWeights2.bold,
        color: colors2["neutral-90"]
      }
    },
    snackbar: {
      default: {
        borderRadius: radii.lg
      },
      separator: {
        default: {
          borderLeft: "1px solid",
          borderLeftColor: colors2["neutral-30"]
        },
        danger: {
          borderLeftColor: colors2["red-20"]
        },
        warning: {
          borderLeftColor: colors2["orange-20"]
        },
        info: {
          borderLeftColor: colors2["blue-30"]
        },
        success: {
          borderLeftColor: colors2["green-30"]
        }
      }
    }
  };
};

// src/theme/paginations.ts
var getPaginations = (theme) => {
  const { colors: colors2, focus, fontSizes, fontWeights: fontWeights2, toRem } = theme;
  return {
    default: {
      width: toRem(32),
      height: toRem(32),
      color: colors2["neutral-90"],
      fontWeight: fontWeights2.bold,
      fontSize: fontSizes.xs
    },
    item: {
      "&:hover, &:focus": {
        backgroundColor: colors2["neutral-30"]
      },
      "&:focus": { ...focus(colors2["neutral-60"]) }
    },
    active: {
      backgroundColor: colors2["neutral-90"],
      color: colors2["neutral-10"],
      "&:hover, &:focus": {
        backgroundColor: colors2["neutral-90"]
      }
    },
    disabled: {
      backgroundColor: colors2["beige-40"],
      color: colors2["beige-70"]
    }
  };
};

// src/theme/tabs.ts
var getTabs = (theme) => {
  const { borderWidths: borderWidths2, colors: colors2, fontSizes, fontWeights: fontWeights2, lineHeights, space } = theme;
  return {
    tabsBorder: {
      horizontal: {
        boxShadow: `inset 0 -${borderWidths2.sm} 0 ${colors2["neutral-30"]}`
      },
      vertical: {
        boxShadow: `inset -${borderWidths2.sm} 0 0 ${colors2["neutral-30"]}`
      }
    },
    item: {
      default: {
        color: colors2["neutral-70"],
        fontWeight: fontWeights2.medium,
        textDecoration: "none",
        lineHeight: lineHeights.md
      },
      active: {
        color: colors2["neutral-90"]
      },
      focus: {
        color: colors2["neutral-90"]
      },
      disabled: {
        color: colors2["neutral-50"]
      },
      size: {
        sm: {
          fontSize: fontSizes.sm
        },
        md: {
          fontSize: fontSizes.md
        }
      }
    },
    panel: {
      vertical: {
        "&:focus": {
          outline: "none"
        }
      },
      horizontal: {
        marginTop: space.xl,
        "&:focus": {
          outline: "none"
        }
      }
    },
    activeBar: {
      horizontal: {
        background: colors2["primary-40"],
        height: borderWidths2.md
      },
      vertical: {
        background: colors2["primary-40"],
        width: borderWidths2.md
      }
    },
    icon: {
      maxWidth: space.lg,
      maxHeight: space.lg
    },
    badge: {
      maxHeight: space.lg
    }
  };
};

// src/theme/badges.ts
var getBadges = (theme) => {
  const { colors: colors2, fontWeights: fontWeights2, space, texts, toRem } = theme;
  return {
    default: {
      ...texts.xs,
      fontWeight: fontWeights2.medium
    },
    variants: {
      default: {
        color: colors2["beige-70"],
        backgroundColor: colors2["beige-30"]
      },
      primary: {
        color: colors2["neutral-90"],
        backgroundColor: colors2["primary-40"]
      }
    },
    disabled: {
      default: {
        color: colors2["beige-40"],
        backgroundColor: colors2["beige-20"]
      },
      primary: {
        color: colors2["primary-80"],
        backgroundColor: colors2["primary-50"]
      }
    },
    sizes: {
      sm: {
        padding: space.xxs,
        height: toRem(16),
        borderRadius: toRem(14)
      },
      md: {
        padding: space.xs,
        height: toRem(20),
        borderRadius: toRem(14)
      }
    }
  };
};

// src/theme/variantIcon.ts
var getVariantIcon = (theme) => {
  const { colors: colors2 } = theme;
  return {
    default: {
      color: colors2["neutral-90"]
    },
    danger: {
      color: colors2["red-70"]
    },
    success: {
      color: colors2["green-60"]
    },
    warning: {
      color: colors2["orange-60"]
    },
    info: {
      color: colors2["blue-60"]
    }
  };
};

// src/theme/core.ts
var DEFAULT_FONT_FAMILY = "work-sans";
var DEFAULT_FONT_SIZE = 16;
var DEFAULT_LETTER_SPACING = "-0.019rem";
var DEFAULT_LINE_HEIGHT = 1.15;
var FONTS_URL = "https://cdn.welcome-ui.com/fonts";
var HEADING_FONT_FAMILY = "welcome-font";
var ICON_FONT_FAMILY = "welcome-icon-font";
var createTheme = (options = {}) => {
  const {
    defaultFontFamily = DEFAULT_FONT_FAMILY,
    defaultFontSize = DEFAULT_FONT_SIZE,
    defaultLetterSpacing = DEFAULT_LETTER_SPACING,
    defaultLineHeight = DEFAULT_LINE_HEIGHT,
    fontsUrl = FONTS_URL,
    headingFontFamily = HEADING_FONT_FAMILY,
    iconFontFamily = ICON_FONT_FAMILY,
    ...rest
  } = options;
  let theme = {};
  theme.transformers = { ...import_styled_components2.rpxTransformers };
  theme.toEm = (px) => `${px / defaultFontSize}em`;
  theme.toRem = (px) => `${px / defaultFontSize}rem`;
  theme.toPx = (rem) => `${rem * defaultFontSize}px`;
  theme.colors = colors;
  theme.fontsUrl = fontsUrl;
  theme.fontFaces = fontFaces(theme);
  theme.fontSizes = getFontSizes("rem", theme);
  theme.defaultLineHeight = defaultLineHeight;
  theme.defaultLetterSpacing = defaultLetterSpacing;
  theme.lineHeights = getLineHeights(theme);
  theme.fontWeights = fontWeights;
  theme.letterSpacings = getLetterSpacings(theme);
  theme.fonts = getFonts(defaultFontFamily, headingFontFamily, iconFontFamily);
  theme.borderWidths = borderWidths;
  theme.screens = screens;
  theme.space = getSpace(theme);
  theme.inset = theme.space;
  theme.icons = getIcons(theme);
  theme.radii = getRadii(theme);
  theme.transitions = transitions;
  theme.timingFunction = timingFunction;
  theme.shadows = shadows;
  theme = (0, import_mergeDeepRight.default)(theme, rest);
  theme.selection = getSelection(theme);
  theme.underline = getUnderline(theme);
  theme.focus = getFocus(theme);
  theme.defaultCards = getDefaultCards(theme);
  theme.textsFontWeights = getTextsFontWeights(theme);
  theme.textsFontFamily = getTextsFontFamily(theme);
  theme.textsFontColors = getTextFontColors(theme);
  theme.textsTextTransform = getTextsTextTransform();
  theme.texts = getTexts(theme);
  theme.alerts = getAlerts(theme);
  theme.avatars = getAvatars(theme);
  theme.badges = getBadges(theme);
  theme.buttons = getButtons(theme);
  theme.breadcrumbs = getBreadcrumbs(theme);
  theme.toasts = getToasts(theme);
  theme.paginations = getPaginations(theme);
  theme.tabs = getTabs(theme);
  theme.tags = getTags(theme);
  theme.tooltips = getTooltips(theme);
  theme.links = getLinks(theme);
  theme.dropdownMenu = getDropdownMenu(theme);
  theme.tables = getTables(theme);
  theme.cards = getCards(theme);
  theme.modals = getModals(theme);
  theme.drawers = getDrawers(theme);
  theme.loaders = getLoaders(theme);
  theme.accordions = getAccordions(theme);
  theme.swipers = getSwipers(theme);
  theme.labels = getLabels(theme);
  theme.popovers = getPopovers(theme);
  theme.defaultFields = getDefaultFields(theme);
  theme.hints = getHints(theme);
  theme.checkboxes = getCheckboxes(theme);
  theme.toggles = getToggles(theme);
  theme.dateTimePickerCommon = getDateTimePickerCommon(theme);
  theme.textareas = getTextareas(theme);
  theme.filedrops = getFiledrops(theme);
  theme.radios = getRadios(theme);
  theme.radioTabs = getRadioTabs(theme);
  theme.sliders = getSliders(theme);
  theme.variantIcon = getVariantIcon(theme);
  theme.states = import_styled_components2.defaultTheme.states;
  theme = (0, import_mergeDeepRight.default)(theme, rest);
  return theme;
};

// src/theme/dark.ts
var generateDarkColors = Object.keys(colors).reduce((acc, key) => {
  if (key.startsWith("secondary-") || key === "overlay")
    return acc;
  const number = 100 - Number(key.slice(-2));
  const variant = key.slice(0, key.length - 2);
  return {
    ...acc,
    [key]: colors[`${variant}${number}`]
  };
}, {});
var colorsDark = {
  ...colors,
  ...getColors(generateDarkColors)
};
var darkTheme = {
  colors: colorsDark
};

// src/utils/base.ts
var import_styled_components5 = require("@xstyled/styled-components");

// src/utils/font.ts
var import_styled_components3 = require("@xstyled/styled-components");
function getSource(url, extensions, isVariable) {
  if (isVariable) {
    return extensions.map((extension) => `url('${url}.${extension}') format('${extension}-variations')`).join(", ");
  }
  return extensions.map((extension) => `url('${url}.${extension}') format('${extension}')`).join(", ");
}
function getFont({
  name,
  variation: {
    display = "swap",
    extensions = ["woff2", "woff"],
    isVariable,
    style,
    unicodeRange,
    url,
    weight
  }
}) {
  return import_styled_components3.css`
    @font-face {
      font-family: ${name};
      src: ${getSource(url, extensions, isVariable)};
      font-display: ${display};
      ${weight && import_styled_components3.css`
        font-weight: ${weight};
      `}
      ${style && import_styled_components3.css`
        font-style: ${style};
      `}
      ${unicodeRange && import_styled_components3.css`
        unicode-range: ${unicodeRange};
      `}
    }
  `;
}
var fonts = () => ({ theme }) => {
  if (!theme || !theme.fontFaces)
    return null;
  return Object.entries(theme.fontFaces).map(
    ([name, variations]) => variations.map((variation) => getFont({ name, variation }))
  );
};

// src/utils/reset.ts
var import_styled_components4 = require("@xstyled/styled-components");
var resetStyles = import_styled_components4.css`
  html,
  body,
  div,
  span,
  applet,
  object,
  iframe,
  h1,
  h2,
  h3,
  h4,
  h5,
  h6,
  p,
  blockquote,
  pre,
  a,
  abbr,
  acronym,
  address,
  big,
  cite,
  code,
  del,
  dfn,
  em,
  img,
  ins,
  kbd,
  q,
  s,
  samp,
  small,
  strike,
  strong,
  sub,
  sup,
  tt,
  var,
  b,
  u,
  i,
  center,
  dl,
  dt,
  dd,
  ol,
  ul,
  li,
  fieldset,
  form,
  label,
  legend,
  table,
  caption,
  tbody,
  tfoot,
  thead,
  tr,
  th,
  td,
  article,
  aside,
  canvas,
  details,
  embed,
  figure,
  figcaption,
  footer,
  header,
  hgroup,
  menu,
  nav,
  output,
  ruby,
  section,
  summary,
  time,
  mark,
  audio,
  video {
    min-width: 0;
    min-height: 0;
    margin: 0;
    padding: 0;
    border: 0;
    font-size: 100%;
    vertical-align: baseline;
  }
  article,
  aside,
  details,
  figcaption,
  figure,
  footer,
  header,
  hgroup,
  menu,
  nav,
  section {
    display: block;
  }
  ol,
  ul {
    list-style: none;
  }
  blockquote,
  q {
    quotes: none;
  }
  blockquote::before,
  blockquote::after,
  q::before,
  q::after {
    content: '';
    content: none;
  }
  table {
    border-collapse: collapse;
    border-spacing: 0;
  }
  a {
    text-decoration: none;
  }
  img {
    overflow: hidden;
  }
  input {
    -webkit-appearance: none;
    -moz-appearance: none;
    appearance: none;
  }
  input::-webkit-search-cancel-button {
    display: none;
  }
  :focus {
    outline: none !important; /* important for firefox */
  }
  *,
  *::after,
  *::before {
    box-sizing: border-box;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
  }
  html {
    height: 100%;
  }
  body {
    min-height: 100%;
    padding-top: 1px;
    margin-top: -1px;
  }
`;
var normalizeStyle = import_styled_components4.css`
  html {
    line-height: 1.15;
    -webkit-text-size-adjust: 100%;
  }

  body {
    margin: 0;
  }

  main {
    display: block;
  }

  h1 {
    font-size: 2em;
    margin: 0.67em 0;
  }

  hr {
    box-sizing: content-box;
    height: 0;
    overflow: visible;
  }

  pre {
    font-family: monospace, monospace;
    font-size: 1em;
  }

  a {
    background-color: transparent;
  }

  abbr[title] {
    border-bottom: none;
    text-decoration: underline;
    text-decoration: underline dotted;
  }

  b,
  strong {
    font-weight: bolder;
  }

  code,
  kbd,
  samp {
    font-family: monospace, monospace;
    font-size: 1em;
  }

  small {
    font-size: 80%;
  }

  sub,
  sup {
    font-size: 75%;
    line-height: 0;
    position: relative;
    vertical-align: baseline;
  }

  sub {
    bottom: -0.25em;
  }

  sup {
    top: -0.5em;
  }

  img {
    border-style: none;
  }

  button,
  input,
  optgroup,
  select,
  textarea {
    font-family: inherit;
    font-size: 100%;
    line-height: 1.15;
    margin: 0;
  }

  button,
  input {
    overflow: visible;
  }

  button,
  select {
    text-transform: none;
  }

  button,
  [type='button'],
  [type='reset'],
  [type='submit'] {
    -webkit-appearance: button;
  }

  button::-moz-focus-inner,
  [type='button']::-moz-focus-inner,
  [type='reset']::-moz-focus-inner,
  [type='submit']::-moz-focus-inner {
    border-style: none;
    padding: 0;
  }

  button:-moz-focusring,
  [type='button']:-moz-focusring,
  [type='reset']:-moz-focusring,
  [type='submit']:-moz-focusring {
    outline: 1px dotted ButtonText;
  }

  fieldset {
    padding: 0.35em 0.75em 0.625em;
  }

  legend {
    box-sizing: border-box;
    color: inherit;
    display: table;
    max-width: 100%;
    padding: 0;
    white-space: normal;
  }

  progress {
    vertical-align: baseline;
  }

  textarea {
    overflow: auto;
  }

  [type='checkbox'],
  [type='radio'] {
    box-sizing: border-box;
    padding: 0;
  }

  [type='number']::-webkit-inner-spin-button,
  [type='number']::-webkit-outer-spin-button {
    height: auto;
  }

  [type='search'] {
    -webkit-appearance: textfield;
    outline-offset: -2px;
  }

  [type='search']::-webkit-search-decoration {
    -webkit-appearance: none;
  }

  ::-webkit-file-upload-button {
    -webkit-appearance: button;
    font: inherit;
  }

  details {
    display: block;
  }

  summary {
    display: list-item;
  }

  template {
    display: none;
  }

  [hidden] {
    display: none;
  }
`;

// src/utils/base.ts
var baseBoxSizing = import_styled_components5.css`
  * {
    &,
    &::before,
    &::after {
      box-sizing: border-box;
    }
  }
`;
function baseFonts() {
  return import_styled_components5.css`
    body,
    button,
    input,
    select,
    textarea {
      /* stylelint-disable-next-line */
      font-family: texts;
      -webkit-font-smoothing: antialiased;
      line-height: html;
      letter-spacing: html;
    }
  `;
}
var GlobalStyle = (0, import_styled_components5.createGlobalStyle)(
  ({ useReset }) => import_styled_components5.css`
    ${normalizeStyle};
    ${fonts()};
    ${baseFonts()};
    ${useReset ? resetStyles : baseBoxSizing};

    html {
      color: neutral-60;
    }

    ::selection {
      ${(0, import_styled_components5.th)("selection")};
    }

    /* for firefox */
    &[type='search'] {
      appearance: none;
    }

    /* to remove x on macos */
    input[type='search']::-webkit-search-decoration,
    input[type='search']::-webkit-search-cancel-button,
    input[type='search']::-webkit-search-results-button,
    input[type='search']::-webkit-search-results-decoration {
      appearance: none;
    }

    /* Fix to toast notification when useReset prop is add to WUI provider */
    .Toaster__message-wrapper {
      min-height: 'auto';
    }
  `
);

// src/WuiProvider.tsx
var import_react = __toESM(require("react"));
var import_styled_components6 = require("@xstyled/styled-components");
var import_utils2 = require("@welcome-ui/utils");
var WuiProvider = ({
  children,
  hasGlobalStyle = true,
  reactRootId = "root",
  shouldHideFocusRingOnClick = true,
  theme,
  useReset
}) => {
  return /* @__PURE__ */ import_react.default.createElement(import_styled_components6.ThemeProvider, { theme }, /* @__PURE__ */ import_react.default.createElement(import_react.default.Fragment, null, hasGlobalStyle && /* @__PURE__ */ import_react.default.createElement(GlobalStyle, { useReset }), shouldHideFocusRingOnClick ? /* @__PURE__ */ import_react.default.createElement(import_utils2.HideFocusRingsRoot, { reactRootId }, children) : children));
};
WuiProvider.displayName = "WuiProvider";
